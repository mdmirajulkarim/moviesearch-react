{"version":3,"sources":["components/CustomNavbar.jsx","components/News.jsx","components/rows.jsx","components/Home.jsx","components/About.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NavMenu","Navbar","default","collapseOnSelect","to","className","style","fontSize","marginLeft","Collapse","Nav","pullRight","NavItem","eventKey","componentClass","Link","href","Component","News","Image","src","Container","Row","Col","xs","sm","MovieRows","props","console","log","this","movie","title","background","width","poster_src","alt","float","overview","Home","state","data","performSearch","searchTerm","urlString","Axios","get","then","res","results","movieRows","map","poster_path","movieRow","key","id","push","setState","catch","err","event","target","value","display","paddingTop","paddingBottom","paddingLeft","onChange","searchChangeHandler","bind","placeholder","About","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c3b9ad3a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// import { Link } from 'react-router-dom';\nimport './CustomNavbar.css'\n\nexport default class NavMenu extends Component {\n  render() {\n    return (\n\n      <Navbar default collapseOnSelect>\n    \n      \n          \n          <Link to =\"/\"><i className=\"fas fa-video\"></i></Link>\n        <strong style={{fontSize:20, marginLeft:10,}}><Link to =\"/\"> Moviesearch DB</Link></strong>\n        <Navbar.Collapse>\n          <Nav pullRight>\n            <NavItem eventKey={1} componentClass={Link}  href=\"/\" to=\"/\">\n              Home\n            </NavItem>\n            <NavItem eventKey={2} componentClass={Link}  href=\"/about\" to=\"/about\">\n              About\n            </NavItem>\n            <NavItem eventKey={3} componentClass={Link} href=\"/news\" to=\"/news\">\n              News\n            </NavItem>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nimport { Container, Row, Col, Image } from 'react-bootstrap';\nimport './news.css';\n\nexport default class News extends Component {\n  render() {\n    return (\n      <div>\n        <Image src=\"assets/mountain-man.jpg\" className=\"header-image\" />\n        <Container>\n          <h2>News</h2>\n          <Row>\n            <Col xs={12} sm={8} className=\"main-section\">\n              <p>I spend a lot of time walking around in the woods and talking to trees, and squirrels, and little rabbits and stuff. The secret to doing anything is believing that you can do it. Anything that you believe you can do strong enough, you can do. Anything. As long as you believe. Just go out and talk to a tree. Make friends with it. I guess that would be considered a UFO. A big cotton ball in the sky. Tree trunks grow however makes them happy. In nature, dead trees are just as normal as live trees.</p>\n              <p>Sometimes you learn more from your mistakes than you do from your masterpieces. Here's something that's fun. If you overwork it you become a cloud killer. There's nothing worse than a cloud killer. These trees are so much fun. I get started on them and I have a hard time stopping.</p>\n              <p>Trees grow in all kinds of ways. They're not all perfectly straight. Not every limb is perfect. You can't make a mistake. Anything that happens you can learn to use - and make something beautiful out of it. The light is your friend. Preserve it. If these lines aren't straight, your water's going to run right out of your painting and get your floor wet.</p>\n              <p>Anyone can paint. This is the way you take out your flustrations. This is where you take out all your hostilities and frustrations. It's better than kicking the puppy dog around and all that so.</p>\n              <p>Water's like me. It's laaazy ... Boy, it always looks for the easiest way to do things Let's make some happy little clouds in our world. This is a happy place, little squirrels live here and play. We'll do another happy little painting. A fan brush is a fantastic piece of equipment. Use it. Make friends with it. We might as well make some Almighty mountains today as well, what the heck.</p>\n            </Col>\n            <Col xs={12} sm={4} className=\"sidebar-section\">\n              <Image src=\"assets/dog-people.jpg\" />\n              <p>I spend a lot of time walking around in the woods and talking to trees, and squirrels, and little rabbits and stuff. The secret to doing anything is believing that you can do it. Anything that you believe you can do strong enough, you can do. Anything. As long as you believe. Just go out and talk to a tree. Make friends with it. I guess that would be considered a UFO. A big cotton ball in the sky. Tree trunks grow however makes them happy. In nature, dead trees are just as normal as live trees.</p>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nclass MovieRows extends Component {\n  render(props) {\n      console.log('console more',this.props.movie.title)\n    return (\n\n\n       <div  className=\"container\">\n\n            <div className=\"row\"  >\n                <div className=\"col-md-12 text-left\" style={{background:'' }}>\n<img width=\"120\" src={this.props.movie.poster_src} alt=\"poster\" style={{float:'left'}}/>\n<strong className=\"\" style={{marginLeft:'10px',}}>{this.props.movie.title}</strong>\n<p>{this.props.movie.overview}</p>\n\n                    </div>\n                </div>\n                <br/>\n                </div>\n    )\n  }\n}\n\nexport default MovieRows"," \nimport React, { Component } from 'react'\nimport Axios from 'axios';\nimport MovieRows from './rows'\nexport default class Home extends Component {\n  state = {\n      data:[]\n     \n  }\n  componentDidMount() {\n    this.performSearch('hacker')\n  }\n   performSearch = (searchTerm) =>\n  {\n    \n\n  const urlString = 'https://api.themoviedb.org/3/search/movie?api_key=1b5adf76a72a13bad99b8fc0c68cb085&query='+searchTerm\n  Axios.get(urlString).then(res => {\n    const results = res.data.results\n    console.log('results', results)\n    let movieRows = []\n\n    results.map((movie) => {\n      \n        movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n  \n        const movieRow = <MovieRows key={movie.id}  movie={movie}/>\n        \n        movieRows.push(movieRow)\n      })\n  \n  \n      this.setState({data: movieRows})\n  })\n  .catch(err => console.log('fetch error'))\n  \n  }\n  searchChangeHandler(event)\n  {\n    console.log(event.target.value)\n    const boundObject=this\n    const searchTerm=event.target.value\n\n    boundObject.performSearch(searchTerm)\n\n  }\n  render() {\n    return (\n      <div>\n          <input style={{\n          fontSize: 24,\n          display: 'block',\n          width: \"99%\",\n          paddingTop: 8,\n          paddingBottom: 8,\n          paddingLeft: 16\n        }} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Enter your favorites movie name\"/>\n {this.state.data}\n\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\n\nimport { Container, Row, Col} from 'react-bootstrap';\nexport default class About extends Component {\n  render() {\n    return (\n      <div>\n <Container>\n          <h2>About</h2>\n          <Row>\n            <Col xs={12} sm={8} className=\"main-section\">\n              <p>I spend a lot of time walking around in the woods and talking to trees, and squirrels, and little rabbits and stuff. The secret to doing anything is believing that you can do it. Anything that you believe you can do strong enough, you can do. Anything. As long as you believe. Just go out and talk to a tree. Make friends with it. I guess that would be considered a UFO. A big cotton ball in the sky. Tree trunks grow however makes them happy. In nature, dead trees are just as normal as live trees.</p>\n              <p>Sometimes you learn more from your mistakes than you do from your masterpieces. Here's something that's fun. If you overwork it you become a cloud killer. There's nothing worse than a cloud killer. These trees are so much fun. I get started on them and I have a hard time stopping.</p>\n              <p>Trees grow in all kinds of ways. They're not all perfectly straight. Not every limb is perfect. You can't make a mistake. Anything that happens you can learn to use - and make something beautiful out of it. The light is your friend. Preserve it. If these lines aren't straight, your water's going to run right out of your painting and get your floor wet.</p>\n              <p>Anyone can paint. This is the way you take out your flustrations. This is where you take out all your hostilities and frustrations. It's better than kicking the puppy dog around and all that so.</p>\n              <p>Water's like me. It's laaazy ... Boy, it always looks for the easiest way to do things Let's make some happy little clouds in our world. This is a happy place, little squirrels live here and play. We'll do another happy little painting. A fan brush is a fantastic piece of equipment. Use it. Make friends with it. We might as well make some Almighty mountains today as well, what the heck.</p>\n            </Col>\n</Row>\n</Container>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './App.css'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Navbar from './components/CustomNavbar'\nimport News from './components/News'\nimport Home from './components/Home'\nimport About from './components/About'\n\n\nclass App extends Component {\n\n\n\n  render() {\n\n    return (\n      <Router>\n      <div>\n        <Navbar/>\n       <Route  exact path=\"/\" component={Home}/>\n  <Route path=\"/about\" component={About}/>\n  <Route path =\"/news\" component={News}/>\n   </div>\n    </Router>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}